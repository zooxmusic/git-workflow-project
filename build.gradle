buildscript {

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath 'com.github.ksoichiro:gradle-console-reporter:+'

        /* https://flywaydb.org/documentation/gradle/ */
        classpath("gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:$flywayVersion")
    }
}
apply plugin: 'com.github.ksoichiro.console.reporter'
apply(plugin: "application")
apply(plugin: "java")
apply(plugin: "org.springframework.boot")
apply(plugin: "io.spring.dependency-management")
apply(plugin: "org.flywaydb.flyway")
apply(plugin: "jacoco")

bootJar {
    baseName = "git-workflow-project"
    version =  "0.1.0-SNAPSHOT"
}

dependencyManagement {
    imports {
        mavenBom("io.spring.platform:platform-bom:$springPlatformVersion")
        mavenBom("org.springframework.boot:spring-boot-starter-parent:$springBootVersion")
    }
}

repositories {
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url "http://repo1.maven.org/maven2/" }
}

mainClassName = "com.zoox.sample.git.Application"

sourceCompatibility = 1.8
targetCompatibility = 1.8

/**
 * I prefer using double quotes in all gradle files. I do this because
 * if you use any variables in them, such as $springBootVersion or something
 * you need double quotes for the compiler to recognize them. So to alleviate
 * any potential time wasters, I always use double quotes and never have this issue
 *
 * I also prefer the syntax I have chosen below because for one it is more aligned
 * with the DRY principle and for two it does end up being easier to read in the end.
 *
 * I do realize the bad thing about this is that mvnrepository.com and other maven repositories
 * do not normally offer this syntax at all so when you copy and paste you do need to
 * sanitize it
 *
 */

dependencies {
    compile(
            /* Spring*/
            ["org.springframework:spring-core"],

            /* Spring Boot */
            ["org.springframework.boot:spring-boot-starter-data-jpa"],
            ["org.springframework.boot:spring-boot-starter-web"],
            ["org.springframework.boot:spring-boot-starter-actuator"],
            ["org.springframework.boot:spring-boot-devtools"],


            ["com.h2database:h2"],
            ["org.flywaydb:flyway-core:$flywayVersion"]


    )


    compileOnly(
            ["org.projectlombok:lombok:$lombokVersion"]
    )

    testCompile(
            ["org.springframework.boot:spring-boot-starter-test"],
            ["junit:junit:$junitVersion"],
            ["org.jacoco:org.jacoco.agent:$jacocoVersion"],
            ["org.jbehave:jbehave-core:$jbehaveVersion"],
            ["org.jbehave:jbehave-spring:$jbehaveVersion"],
            ["org.mockito:mockito-all:$mockitoVersion"],

    )
}

flyway {
    url = "jdbc:h2:~/test"
    user = "sa"
    password = ""
}

check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport

test {
    jacoco {
        append = false
        //destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}
/* https://github.com/ksoichiro/gradle-console-reporter#configurations */
jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        html.enabled true
        html.destination file("${buildDir}/reports/tests/coverage")
        xml.enabled false
        csv.enabled false
    }
}

task codeCoverageReport(dependsOn: test, type: JacocoReport) {

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco/coverage.html")
        xml.enabled false
        csv.enabled false
    }
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['com.zoox.sample.git.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

consoleReporter {
    junit {
        stdoutEnabled true
        stderrEnabled true
        stacktraceEnabled true
    }
    jacoco {
        thresholdFine 90

        //reportFile file("${buildDir}/reports/jacoco/test/coverage.html")
    }
}

/* A custom task to print the current active profile in spring */
task activeProfile {
    doFirst {
        println(System.getenv("SPRING_PROFILES_ACTIVE"))
    }
}